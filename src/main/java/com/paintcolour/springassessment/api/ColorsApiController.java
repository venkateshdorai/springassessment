/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.paintcolour.springassessment.api;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.paintcolour.springassessment.model.Color;
import com.paintcolour.springassessment.service.ColorService;



@RestController
@RequestMapping("/colors")
@Validated
public class ColorsApiController {
	
	Logger logger = LoggerFactory.getLogger(ColorsApiController.class);

	@Autowired
	private ColorService colorService;

    /**
     * POST /colors : Add a new color to the store
     * Add a new color to the store
     *
     * @param color Create a new color in the store (required)
     * @return Successful operation (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Invalid input (status code 405)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/addColor",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
	public Color saveColor(@RequestBody @Valid Color color) {
    	logger.debug(color.toString());
		return colorService.saveColor(color);
	}


    /**
     * DELETE /colors/{colorName} : Deletes a color
     * delete a color
     *
     * @param colorName Name of color to delete (required)
     * @return Invalid color name (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/colors/{colorName}"
    )
    public Void deleteColorByName(@PathVariable("colorName") String colorName) {
		colorService.deleteColorByName(colorName);
		return null;
	}


    /**
     * GET /colors/{colorName} : Find color by name
     * Returns a single color
     *
     * @param colorName Name of color to return (required)
     * @return successful operation (status code 200)
     *         or Invalid name supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Color not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/colors/{colorName}",
        produces = { "application/json" }
    )
	public Color findColorByName(@PathVariable("colorName") String colorName) {
		return colorService.findColorByName(colorName);
	}


    /**
     * GET /colors : List all colors
     * Returns all colors in the store
     *
     * @return successful operation (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/colors",
        produces = { "application/json" }
    )
	public List<Color> findColors() {
		return colorService.findAllColors();
	}


    /**
     * PUT /colors/{colorName} : Update an existing color
     * Update an existing color by name
     *
     * @param colorName Name of color to return (required)
     * @param color Update an existent color in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Color not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/colors/{colorName}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public Color updateColor(@RequestBody Color color, @PathVariable("colorName") String colorName) {
		return colorService.updateColor(color, colorName);
	}

    
    /**
     * GET /mix : Mix two colors
     * Mixes two colors 1:1 and returns the result.
     *
     * @param color1 Name of first color in the mix (required)
     * @param color2 Name of second color in the mix (required)
     * @return successful operation (status code 200)
     *         or Invalid parameters supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or One or both colors could not be found (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/mix/{colorName1}/{colorName2}",
            produces = { "application/json" }
        )
    public Color mixColorsByName(@PathVariable("colorName1") String colorName1, @PathVariable("colorName2") String colorName2) {
		return colorService.mixColor(colorName1, colorName2);
	}
}
